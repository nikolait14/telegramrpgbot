import datetime
import random
import time
from config import token

import telebot
from telebot.types import Message, InlineKeyboardMarkup as Ikm, InlineKeyboardButton as Ikb, CallbackQuery as Cq
from text import training, camp, reg_text, mmenu
import bd
from bd import *

tim = {}

bot = telebot.TeleBot(token)
delete = telebot.types.ReplyKeyboardRemove()


def reg1(msg: Message):
    tim[msg.chat.id] = {"name": None,
                        "ras": None
                        }
    bot.send_message(msg.chat.id, reg_text % msg.from_user.first_name)
    bot.register_next_step_handler(msg, reg2)




def reg2(msg: Message):
    tim[msg.chat.id]["name"] = msg.text
    but = telebot.types.ReplyKeyboardMarkup(True, False)
    but.row("–°—Ç—Ä–µ–ª–æ–∫", "–ú–µ–¥–∏–∫")
    but.row("–ò–Ω–∂–µ–Ω–µ—Ä", "–†–∞–∫–µ—Ç—á–∏–∫")
    bot.send_message(msg.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞,{msg.text}:", reply_markup=but)
    bot.register_next_step_handler(msg, reg3)


def reg3(msg: Message):
    if msg.text == "–†–∞–∫–µ—Ç—á–∏–∫":
        bot.send_message(msg.chat.id, "–î–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
        bot.register_next_step_handler(msg, reg3)
        return
    tim[msg.chat.id]["ras"] = msg.text
    bd.users.write([msg.chat.id, tim[msg.chat.id]["name"], tim[msg.chat.id]["ras"], 100, 10, 1, 0])
    print("–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    bot.send_message(msg.chat.id, training)
    time.sleep(5)
    menu(msg)

def tryy(msg: Message):
    global tim
    try:
        print(tim[msg.chat.id]["w"])

    except KeyError:
        tim[msg.chat.id]["w"] = 0
    bot.send_message(msg.chat.id, "–ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∞—Ç–∞–∫–µ!", reply_markup=delete)
    time.sleep(3)
    names = ["up", "right", "left", "down"]
    random.shuffle(names)
    raname = random.choice(names)
    but = telebot.types.ReplyKeyboardMarkup(True, False)
    but.row(names[0], names[1])
    but.row(names[2], names[3])
    bot.send_message(msg.chat.id, f"–ó–∞—â–∏—â–∞–π—Å—è! –£–¥–∞—Ä {raname}", reply_markup=but)
    tim[msg.chat.id]["time"] = datetime.datetime.now().timestamp()
    bot.register_next_step_handler(msg, step, raname)


def step(msg: Message, ran: str):
    final = datetime.datetime.now().timestamp()
    if final - tim[msg.chat.id]["time"] > 3 or ran != msg.text:
        bot.send_message(msg.chat.id, "–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª —É–¥–∞—Ä! –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ", reply_markup=delete)
        time.sleep(3)
        menu(msg)
        return
    elif tim[msg.chat.id]["w"] < 4:
        tim[msg.chat.id]["w"] += 1
        bot.send_message(msg.chat.id, "–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è!–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º. ")
        tryy(msg)
        return
    else:
        tim[msg.chat.id]["w"] = 0
        player = users.read("id", msg.chat.id)
        if player[4] <= 30:
            player[4] += 3
            users.write(player)
            bot.send_message(msg.chat.id, "–í—ã —Å—Ç–∞–ª–∏ —Å–∏–ª—å–Ω–µ–µ!"
                                          f"–¢–µ–ø–µ—Ä—å –≤–∞—à —É—Ä–æ–Ω —Ä–∞–≤–µ–Ω {player[4]} hp!")
        else:
            bot.send_message(msg.chat.id, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∏–ª—ã! ")
        time.sleep(3)
        menu(msg)
        return

def reg4(msg: Message):
    if msg.text == "–ü–æ–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        train(msg)
    if msg.text == "–ò—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏":
        tryy(msg)
    if msg.text == "–ü–æ–π—Ç–∏ –≤ –±–æ–π":
        #fight(msg)
        pass


def train(msg: Message):
    but = Ikm()
    but.row(Ikb("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="train"))
    but.row(Ikb("–ù–∞–∑–∞–¥", callback_data="menu"))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=but)



def eat(msg: Message):
    but = Ikm()
    but.row(Ikb("–ï—Å—Ç—å", callback_data="eat"))
    but.row(Ikb("–ù–∞–∑–∞–¥", callback_data="menu"))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=but)


def sleeep(msg: Message):
    but = Ikm()
    but.row(Ikb("–°–ø–∞—Ç—å", callback_data="sleeep"))
    but.row(Ikb("–ù–∞–∑–∞–¥", callback_data="menu"))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup=but)


def reg5(msg:Message):
    if msg.text == "–û—Ç–¥–æ—Ö–Ω—É—Ç—å":
        tdyx(msg)
    if msg.text == "–ü–æ–∫—É—à–∞—Ç—å":
        eat(msg)
    if msg.text == "–ü–æ—Å–ø–∞—Ç—å":
        sleeep(msg)



def tdyx(msg:Message):
    player = users.read("id", msg.chat.id)
    if player[3] < 100:
        player[3] += 10
    users.write(player)
    bot.send_message(msg.chat.id, "–¢—ã –ø–æ—Å–ø–∞–ª –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–∏–ª—ã! \n"
                                       f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {player[3]} hp")
    time.sleep(3)
    menu(msg)

@bot.message_handler(["stats"])
def stats(msg: Message):
    player = users.read("id", msg.chat.id)
    text = (f"–¢–≤–æ–µ –∏–º—è:{player[1]} \n"
            f"–¢–≤–æ—è —Ä–∞—Å—Å–∞: {player[2]} \n"
            f"–¢–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player[3]} \n"
            f"–¢–≤–æ–π —É—Ä–æ–Ω: {player[4]} \n"
            f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: {player[5]} \n"
            f"–¢–≤–æ–π –æ–ø—ã—Ç: {player[6]}")
    bot.send_message(msg.chat.id, text)
    time.sleep(4)
    menu(msg)


@bot.callback_query_handler(func=lambda call: True)
def callback(call: Cq):
    print(call.data)
    if call.data == "train":
        player = users.read("id", call.message.chat.id)
        player[4] += 10
        users.write(player)
        bot.answer_callback_query(call.id, "–¢–≤–æ—è —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∫–∞ —Ç—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è! \n"
                                           f"–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞–Ω–æ—Å–∏—à—å {player[4]} —É—Ä–æ–Ω–∞", True)

    elif call.data == "eat":
        player = users.read("id", call.message.chat.id)
        if player[3] < 100:
            player[3] += 10
        users.write(player)
        bot.answer_callback_query(call.id, "–¢—ã —Ö–æ—Ä–æ—à–æ –ø–æ–µ–ª –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ–∏ —Å–∏–ª—ã \n"
                                           f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {player[3]} hp", True)

    elif call.data == "sleeep":
        player = users.read("id", call.message.chat.id)
        if player[3] < 100:
            player[3] += 10
        users.write(player)
        bot.answer_callback_query(call.id, "–¢—ã –∫—Ä–µ–ø–∫–æ –ø–æ—Å–ø–∞–ªüí§üò¥ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ–∏ —Å–∏–ª—ã \n"
                                           f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {player[3]} hp", True )

    elif call.data == "menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)

@bot.message_handler(["menu"])
def menu(msg: Message):
    bot.send_message(msg.chat.id, mmenu, reply_markup=delete)


@bot.message_handler(["start"])
def start(msg: Message):
    if bd.newplayer(msg):
        reg1(msg)
    else:
        bot.send_message(msg.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ")


@bot.message_handler(["square"])
def square(msg: Message):
    but = telebot.types.ReplyKeyboardMarkup(True, False)
    but.row("–ü–æ–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–ò—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏")
    but.row("–ü–æ–π—Ç–∏ –≤ –±–æ–π")
    bot.send_message(msg.chat.id, "–¢—ã –ø–æ–ø–∞–ª –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–ª–æ—â–∞–¥—å.–ß–µ–º –∑–∞–π–º–µ—à—å—Å—è?: ", reply_markup=but)
    bot.register_next_step_handler(msg, reg4)


@bot.message_handler(["home"])
def home(msg: Message):
    but = telebot.types.ReplyKeyboardMarkup(True, False)
    but.row("–û—Ç–¥–æ—Ö–Ω—É—Ç—å", "–ü–æ–∫—É—à–∞—Ç—å", "–ü–æ—Å–ø–∞—Ç—å")
    bot.send_message(msg.chat.id, "–¢—ã –ø–æ–ø–∞–ª –≤ –ª–∞–≥–µ—Ä—å. –ß–µ–º –∑–∞–π–º–µ—à—å—Å—è?:", reply_markup=but)
    bot.register_next_step_handler(msg, reg5)



bot.infinity_polling()